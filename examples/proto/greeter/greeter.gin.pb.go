// Code generated by protoc-gen-wzo-gin. DO NOT EDIT.
// versions:
// - protoc-gen-wzo-gin 0.0.1
// - protoc             v3.17.3
// source: greeter.proto

package greeter

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	server "github.com/wyy-go/wzo/core/transport/http/server"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible.
var _ = errors.New
var _ = context.TODO
var _ = gin.New
var _ = server.FromCarrier

// GreeterHTTPServer
type GreeterHTTPServer interface {
	// SayHello
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterHTTPServer(g *gin.RouterGroup, srv GreeterHTTPServer) {
	r := g.Group("")
	{
		r.GET("/hello/:name", _Greeter_SayHello0_HTTP_Handler(srv))
	}
}

func _Greeter_SayHello0_HTTP_Handler(srv GreeterHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		carrier := server.FromCarrier(c.Request.Context())
		shouldBind := func(req *HelloRequest) error {
			if err := c.ShouldBindQuery(req); err != nil {
				return err
			}
			if err := c.ShouldBindUri(req); err != nil {
				return err
			}
			return carrier.Validate(c.Request.Context(), req)
		}

		var err error
		var req HelloRequest
		var reply *HelloReply

		if err = shouldBind(&req); err != nil {
			carrier.Error(c, err)
			return
		}
		reply, err = srv.SayHello(c.Request.Context(), &req)
		if err != nil {
			carrier.Error(c, err)
			return
		}
		carrier.Render(c, reply)
	}
}
