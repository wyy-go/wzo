// Code generated by protoc-gen-wzo-gin. DO NOT EDIT.
// versions:
// - protoc-gen-wzo-gin 0.0.1
// - protoc             v3.17.3
// source: example.proto

package example

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	server "github.com/wyy-go/wzo/core/transport/http/server"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible.
var _ = errors.New
var _ = context.TODO
var _ = gin.New
var _ = server.FromCarrier

// ExampleHTTPServer
type ExampleHTTPServer interface {
	// Login
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	// Sms
	Sms(context.Context, *SmsReq) (*SmsRsp, error)
}

func RegisterExampleHTTPServer(g *gin.RouterGroup, srv ExampleHTTPServer) {
	r := g.Group("")
	{
		r.POST("/example/login", _Example_Login0_HTTP_Handler(srv))
		r.POST("/example/sms", _Example_Sms0_HTTP_Handler(srv))
	}
}

func _Example_Login0_HTTP_Handler(srv ExampleHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		carrier := server.FromCarrier(c.Request.Context())
		shouldBind := func(req *LoginReq) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return carrier.Validate(c.Request.Context(), req)
		}

		var err error
		var req LoginReq
		var reply *LoginRsp

		if err = shouldBind(&req); err != nil {
			carrier.Error(c, err)
			return
		}
		reply, err = srv.Login(c.Request.Context(), &req)
		if err != nil {
			carrier.Error(c, err)
			return
		}
		carrier.Render(c, reply)
	}
}

func _Example_Sms0_HTTP_Handler(srv ExampleHTTPServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		carrier := server.FromCarrier(c.Request.Context())
		shouldBind := func(req *SmsReq) error {
			if err := c.ShouldBind(req); err != nil {
				return err
			}
			return carrier.Validate(c.Request.Context(), req)
		}

		var err error
		var req SmsReq
		var reply *SmsRsp

		if err = shouldBind(&req); err != nil {
			carrier.Error(c, err)
			return
		}
		reply, err = srv.Sms(c.Request.Context(), &req)
		if err != nil {
			carrier.Error(c, err)
			return
		}
		carrier.Render(c, reply)
	}
}
